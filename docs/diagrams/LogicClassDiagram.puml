@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class MainParser
Class ABCCommandParser
Class XYZCliSyntax
Class XYZParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class ABCCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" MainParser
MainParser .left.> ABCCommandParser: creates >

ABCCommandParser ..> ABCCommand : creates >
ABCCommandParser ..|> Parser
ABCCommandParser ..> ArgumentMultimap
ABCCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
ABCCommandParser ..> XYZCliSyntax
XYZCliSyntax ..> Prefix
ABCCommandParser ..> XYZParserUtil
XYZParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
ABCCommand -up-|> Command
LogicManager .left.> Command : executes >

note top of XYZCliSyntax: XYZCliSyntax = ProfileCliSyntax,\nGeneralCliSyntax, etc \n(Same definition of XYZ \nused for XYZParserUtil)

LogicManager --> Model
Command .right.> Model
note right of ABCCommand: ABCCommand = AddCommand, \nViewCommand, etc

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
@enduml
